package com.lenovo.csd.eservice.push;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.text.TextUtils;

import com.igexin.sdk.PushConsts;
import com.igexin.sdk.PushManager;
import com.lenovo.csd.eservice.R;
import com.lenovo.csd.eservice.activity.HomeActivity;
import com.lenovo.csd.eservice.activity.LoginActivity;
import com.lenovo.csd.eservice.activity.OperateOrderActivity;
import com.lenovo.csd.eservice.activity.manager.ActivityCollector;
import com.lenovo.csd.eservice.cache.SharedPrefManager;
import com.lenovo.csd.eservice.entity.base.BaseData;
import com.lenovo.csd.eservice.http.HttpClientManager;
import com.lenovo.csd.eservice.http.NetInterface;
import com.lenovo.csd.eservice.http.callback.adapter.JsonHttpCallBack;
import com.lenovo.csd.eservice.message.MessageEvent;
import com.lenovo.csd.eservice.util.Utils;
import com.lenovo.csd.eservice.widget.CustomChooseDialog;

import org.greenrobot.eventbus.EventBus;

import java.util.HashMap;
import java.util.Map;

public class PushBoradCastReceiver extends BroadcastReceiver {

    public static final String REMIND = "remind";
    public static final String LOGOUT = "logout";
    protected CustomChooseDialog loadingDialog;
    private static Handler broadcastLoadingHandler = new Handler();

    /**
     * 应用未启动, 个推 service已经被唤醒,保存在该时间段内离线消息(此时 GetuiSdkDemoActivity.tLogView == null)
     */
    public static StringBuilder payloadData = new StringBuilder();

    @Override
    public void onReceive(Context context, Intent intent) {

        Bundle bundle = intent.getExtras();
        switch (bundle.getInt(PushConsts.CMD_ACTION)) {
            /**
             * 接受服务器端传过来的透传消息
             */
            case PushConsts.GET_MSG_DATA:
                // 获取透传数据
                // String appid = bundle.getString("appid");
                byte[] payload = bundle.getByteArray("payload");
                String taskid = bundle.getString("taskid");
                String messageid = bundle.getString("messageid");
                // smartPush第三方回执调用接口，actionid范围为90000-90999，可根据业务场景执行
                boolean result = PushManager.getInstance().sendFeedbackMessage(context, taskid, messageid, 90001);

                if (payload != null) {
                    String data = new String(payload);
                    /*payloadData.append(data);
                    payloadData.append("\n");*/
                    judgeAction(context, data);

                  /*  if (GetuiSdkDemoActivity.tLogView != null) {
                        GetuiSdkDemoActivity.tLogView.append(data + "\n");
                    }*/
                }
                break;
            //得到CID
            case PushConsts.GET_CLIENTID:

                // 获取ClientID(CID)
                // 第三方应用需要将CID上传到第三方服务器，并且将当前用户帐号和CID进行关联，以便日后通过用户帐号查找CID进行消息推送
                String cid = bundle.getString("clientid");
                BindPushCID(context,cid);
              /*  if (GetuiSdkDemoActivity.tView != null) {
                    GetuiSdkDemoActivity.tView.setText(cid);
                }*/
                break;
            //SDK在线状态
            case PushConsts.GET_SDKONLINESTATE:
                boolean online = bundle.getBoolean("onlineState");
                break;

            case PushConsts.SET_TAG_RESULT:
                String sn = bundle.getString("sn");
                String code = bundle.getString("code");

                String text = "设置标签失败, 未知异常";
                switch (Integer.valueOf(code)) {
                    case PushConsts.SETTAG_SUCCESS:
                        text = "设置标签成功";
                        break;

                    case PushConsts.SETTAG_ERROR_COUNT:
                        text = "设置标签失败, tag数量过大, 最大不能超过200个";
                        break;

                    case PushConsts.SETTAG_ERROR_FREQUENCY:
                        text = "设置标签失败, 频率过快, 两次间隔应大于1s";
                        break;

                    case PushConsts.SETTAG_ERROR_REPEAT:
                        text = "设置标签失败, 标签重复";
                        break;

                    case PushConsts.SETTAG_ERROR_UNBIND:
                        text = "设置标签失败, 服务未初始化成功";
                        break;

                    case PushConsts.SETTAG_ERROR_EXCEPTION:
                        text = "设置标签失败, 未知异常";
                        break;

                    case PushConsts.SETTAG_ERROR_NULL:
                        text = "设置标签失败, tag 为空";
                        break;

                    case PushConsts.SETTAG_NOTONLINE:
                        text = "还未登陆成功";
                        break;

                    case PushConsts.SETTAG_IN_BLACKLIST:
                        text = "该应用已经在黑名单中,请联系售后支持!";
                        break;

                    case PushConsts.SETTAG_NUM_EXCEED:
                        text = "已存 tag 超过限制";
                        break;

                    default:
                        break;
                }

                break;
            case PushConsts.THIRDPART_FEEDBACK:
                /*
                 * String appid = bundle.getString("appid"); String taskid =
                 * bundle.getString("taskid"); String actionid = bundle.getString("actionid");
                 * String result = bundle.getString("result"); long timestamp =
                 * bundle.getLong("timestamp");
                 *
                 * Log.d("GetuiSdkDemo", "appid = " + appid); Log.d("GetuiSdkDemo", "taskid = " +
                 * taskid); Log.d("GetuiSdkDemo", "actionid = " + actionid); Log.d("GetuiSdkDemo",
                 * "result = " + result); Log.d("GetuiSdkDemo", "timestamp = " + timestamp);
                 */
                break;

            default:
                break;
        }
    }

    /**
     * 绑定Uese和设备id
     * @param context
     * @param clientId  个推设备ID
     */
    private  void  BindPushCID(Context context,String clientId){
        if(!TextUtils.isEmpty(Utils.getToken(context))){
            Map<String, String> params = new HashMap<String, String>();
            params.put("user_code", Utils.getUserCode(context));
            params.put("client_id", clientId);
            HttpClientManager.post(NetInterface.BINDING_USERCODE_AND_PUSH_CID + Utils.getToken(context), params, new JsonHttpCallBack<BaseData>() {
                @Override
                public void onSuccess(BaseData result) {
                }

                @Override
                public void onError(Exception e) {
                    e.printStackTrace();
                }
            });
        }

    }

    /**
     * 判断传过来的数据
     *
     * @param context
     * @param data
     */
    private void judgeAction(Context context, final String data) {
        PushResultMessage mPushResultMessage = Utils.fromJsonStringToModeByClass(data, PushResultMessage.class);
        String action = mPushResultMessage.getAction();
        if (!TextUtils.isEmpty(action)) {
            switch (action) {
                case REMIND:
                    //  Log.e("shengtao", "push提醒并跳转功能....");
                    ////判断app进程是否存活
                    if (Utils.isAppAlive(context, Utils.getPackageName(context))) {
                        // Log.e("shengtao", "the app process is alive");
                        /*如果存活的话，就直接启动OperateOrderActivity，但要考虑一种情况，就是app的进程虽然仍然在
                        //但Task栈已经空了，比如用户点击Back键退出应用，但进程还没有被系统回收，如果直接启动
                        //OperateOrderActivity,再按Back键就不会返回HomeActivity了。所以在启动
                        */
                        //登录状态下，需要连续跳两个页面
                        if (Utils.isLogin(context)) {
                            //Log.e("shengtao", "the app is login");
                            //1、OperateOrderActivity前，要先启动HomeActivity。
                         /*   Intent homeIntent = new Intent(context, HomeActivity.class);
                            homeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); //在广播接受者中启动活动需要添加这个标志
                            context.startActivity(homeIntent);*/
                            HomeActivity.goHomeActivity(context, true);
                            //2、启动工单详情页面
                            if (null != mPushResultMessage.getData() && null != mPushResultMessage.getData().getOrderCode()) {
                                String orderId = mPushResultMessage.getData().getOrderCode();
                                OperateOrderActivity.openOrderDetail(context, orderId, true);
                            }
                     /*       Intent orderIntent = new Intent(context, OperateOrderActivity.class);
                            orderIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                            Bundle bundle = new Bundle();
                            bundle.putBoolean("only_id", true);
                            bundle.putSerializable("bean", orders);
                            orderIntent.putExtras(bundle);
                            context.startActivity(orderIntent);*/
                        }/**/ else {
                            //Log.e("shengtao", "the app is logout");
                            //跳转到login页面
                            Intent launchIntent = context.getPackageManager().getLaunchIntentForPackage(Utils.getPackageName(context));
                            launchIntent.setFlags(
                                    Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
                            context.startActivity(launchIntent);
                            if (null != mPushResultMessage.getData() && null != mPushResultMessage.getData().getOrderCode()) {
                                EventBus.getDefault().post(new MessageEvent(mPushResultMessage.getData().getOrderCode(), MessageEvent.Type.NEED_GO_TO_ORDER_PAGE));
                            }
                        }
                    }
                    /*
                    //由于个推推送，app退出后，推送服务就跟着退出，包括notifaction也会跟着销毁，所以，不必考虑此种情况
                    else{
                        Log.e("shengtao", "the app process is dead");
                        //如果app进程已经被杀死，先重新启动app，将DetailActivity的启动参数传入Intent中，参数经过
                        //LoginActivity传HomeActivity，此时app的初始化已经完成，在MainActivity中就可以根据传入
                        // 参数跳转到DetailActivity中去了
                        Intent launchIntent = context.getPackageManager().getLaunchIntentForPackage(Utils.getPackageName(context));
                        launchIntent.setFlags(
                                Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
                        Bundle args = new Bundle();
                        args.putString(Constants.PAGE_FROM, "push");
                        launchIntent.putExtra(Constants.EXTRA_BUNDLE, args);
                        context.startActivity(launchIntent);
                    }*/
                    break;
                case LOGOUT:
                    showLogoutDialog(context);
                    break;
                default:
                    break;
            }
        }
    }

    /**
     * 由于此处是透传，不存在notifaction在，而app被回收的情况，所以无需判断app是否存活
     *
     * @param context
     */

    private void showLogoutDialog(final Context context) {
     /*   AlertDialog.Builder builder = new AlertDialog.Builder(context);
        builder.setTitle("下线通知");
        builder.setMessage("你的账号在其他地方登录！");
        builder.setCancelable(false);
        builder.setPositiveButton("重新登录", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                //清理登录状态
                SharedPrefManager.clearSharedPref(SharedPrefManager.getSystemSharedPref(context.getApplicationContext()));
                ActivityCollector.finishAll();
                Intent intent = new Intent(context, LoginActivity.class);
                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); //在广播接受者中启动活动需要添加这个标志
                context.startActivity(intent);
            }
        });
        AlertDialog dialog = builder.create();
        dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT); //需要设置AlertDialog的类型，保证在广播接收者中可以正常弹出
        dialog.show();*/
      /*  if(null!=ActivityCollector.activities&&ActivityCollector.activities.size()>0) {
            Activity mActivity=ActivityCollector.activities.get(ActivityCollector.activities.size()-1);
            AlertDialog alertDialog = new AlertDialog.Builder(mActivity).create();
            alertDialog.setCancelable(false);
            //alertDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT); //需要设置AlertDialog的类型，保证在广播接收者中可以正常弹出
            alertDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_TOAST); //需要设置AlertDialog的类型，保证在广播接收者中可以正常弹出
            alertDialog.show();
            Window window = alertDialog.getWindow();
            window.setContentView(R.layout.layout_customed_defalut_dialog);
            Button cancelButton = (Button) window.findViewById(R.id.custom_default_dialog_button_cancel);
            Button confirmButton = (Button) window.findViewById(R.id.custom_default_dialog_button_confirm);
            cancelButton.setOnClickListener(new customedOnClickListener(alertDialog, mActivity));
            confirmButton.setOnClickListener(new customedOnClickListener(alertDialog, mActivity));
        }*/
        // showLoadingDialog();(context);
        //showLoadingDialog();
        //exitApp(context,true);
    /*    if(null!=ActivityCollector.activities&&ActivityCollector.activities.size()>0) {
            Intent intent = new Intent(ActivityCollector.activities.get(ActivityCollector.activities.size()-1), DialogActivity.class);
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); //在广播接受者中启动活动需要添加这个标志
            context.startActivity(intent);
        }*/

        if (null != ActivityCollector.activities && ActivityCollector.activities.size() > 0) {
            //loadingDialog = CustomChooseDialog.createDialog(ActivityCollector.activities.get(ActivityCollector.activities.size()-1));
            //showLoadingDialog(/*ActivityCollector.activities.get(ActivityCollector.activities.size()-1)*/);
            Activity topActivity = ActivityCollector.activities.get(ActivityCollector.activities.size() - 1);
            //在弹出窗口之前用Activity的isFinishing判断一下Activity是否还存在
            if (null!=topActivity&&!topActivity.isFinishing()) {
                loadingDialog = new CustomChooseDialog(topActivity, R.style.CustomProgressDialog);
                loadingDialog.setCancelable(false);
                try {
                    showLoadingDialog(/*ActivityCollector.activities.get(ActivityCollector.activities.size()-1)*/);
                    loadingDialog.setCustomedDialogClickListener(new CustomChooseDialog.CustomedDialogClickListener() {
                        @Override
                        public void onConfirm() {
                            dismissLoadingDialog();
                            exitApp(context, true);
                        }
                        @Override
                        public void onCancle() {
                            dismissLoadingDialog();
                            exitApp(context, false);
                        }
                    });
                } catch (Exception e) {
                    //存在这么一种情况，即因某些操作不当而产生了一个严重的异常，从而强制当前Activity被关闭。而在关闭的同时，却没能及时的调用dismiss来解除对Dialog等的引用
                    dismissLoadingDialog();
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * 退出app
     *
     * @param context
     * @param isReLogin 是否需要跳转到登录页面
     */
    public void exitApp(Context context, boolean isReLogin) {
        //清理登录状态
        SharedPrefManager.clearSharedPref(SharedPrefManager.getSystemSharedPref(context.getApplicationContext()));
        ActivityCollector.finishAll();
        if (isReLogin) {
            Intent intent = new Intent(context, LoginActivity.class);
            intent.putExtra(LoginActivity.SHOW_UPDATE, false);
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); //在广播接受者中启动活动需要添加这个标志
            context.startActivity(intent);
        }
    }

    public void showLoadingDialog() {
        broadcastLoadingHandler.post(new Runnable() {
            @Override
            public void run() {
                // 可能存在某种情况下回收了activity，又重新create，导致无attach view
                try {
                    if (loadingDialog != null) {
                        if (!loadingDialog.isShowing())
                            loadingDialog.show();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

    }

    public void dismissLoadingDialog() {
        broadcastLoadingHandler.post(new Runnable() {
            @Override
            public void run() {
                // 可能存在某种情况下回收了activity，又重新create，导致无attach view
                try {
                    if (loadingDialog != null) {
                        if (loadingDialog.isShowing()) {
                            loadingDialog.dismiss();
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }
}
